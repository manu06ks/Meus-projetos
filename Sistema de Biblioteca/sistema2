//SISTEMA PARA BIBLIOTECA

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <ctype.h>

#define TAM_STRING 100

typedef char string[TAM_STRING];

struct livro
{
    int id;
    string titulo;
    string editora, local_publicacao;
    string palavra_1, palavra_2, palavra_3;
    int ano_publicacao, qtd_paginas, qtd_autores, qtd_palavras, edicao, qtd_exemplares;
    string autor_1, autor_2, autor_3;
    struct livro *p_prox;
};
typedef struct livro livro_t;

struct usuario
{
    string nome;
    string endereco;
    string telefone;
    string email;
    int qtd_livros_emprestados;
    int cracha;
    bool usuario_ativo;
    int pendencia;
    struct usuario *p_prox;
};
typedef struct usuario usuario_t;

struct emprestimo
{
    string titulo;
    string nome;
    int cracha_usuario;
    int id_livro;
    int qtd_dias;
    bool emp_ativo;
    int dias_atraso;
    int id_emprestimo;
    struct emprestimo *p_prox;
};
typedef struct emprestimo emprestimo_t;



//SUBROTINAS:

livro_t *cadastrar_novo_livro(int *qtd_livros);
void inserir_livro_inicio(livro_t **lista, livro_t *novo);
void mostrar_livros(livro_t *lista, FILE *fp);
void mostrar_dados_livro(livro_t *dado, FILE *fp);

//localizar livro
livro_t *localizar_livro_por_titulo(livro_t *lista_livro);
livro_t *localizar_livro_por_id(livro_t *lista_livro);
livro_t *localizar_livro_por_palavra_chave(livro_t *lista_livro);
livro_t *localizar_livro_por_autor(livro_t *lista_livro);

usuario_t *cadastrar_novo_usuario(int *qtd_usuario);
void inserir_usuario_inicio(usuario_t **lista, usuario_t *novo);
void mostrar_usuarios(usuario_t *lista, FILE *fp);
void mostrar_dados_usuario(usuario_t *dado, FILE *fp);

//localizar usuario:
usuario_t *localizar_usuario_por_nome(usuario_t *lista_usuario);
usuario_t *localizar_usuario_por_email(usuario_t *lista_usuario);
usuario_t *localizar_usuario_por_cracha(usuario_t *lista_usuario);

emprestimo_t *cadastrar_novo_emprestimo(usuario_t *lista_usuario, livro_t *lista_livro, int *qtd_emprestimo);
void inserir_emprestimo_inicio(emprestimo_t **lista, emprestimo_t *novo);
void mostrar_emprestimo(emprestimo_t *lista, FILE *fp);
void mostrar_dados_emprestimo(emprestimo_t *dado, FILE *fp);

//salvamento de dados:
void salvar_livros_arquivos_binario(string nome, livro_t *lista_livros);
void ler_livros_arquivos_binario(string nome, livro_t **lista_livros, int *qtd_livros);

void salvar_usuarios_arquivo_binario(string nome, usuario_t *lista_usuario);
void ler_usuarios_arquivo_binario(string nome, usuario_t **lista_usuario, int *qtd_usuario);

void salvar_emprestimos_arquivo_binario(string nome, emprestimo_t *lista_emprestimo);
void ler_emprestimos_arquivo_binario(string nome, emprestimo_t **lista_emprestimo, int *qtd_emprestimo);

//exportar:
void exportar_dados_usuario(string nome, usuario_t *lista_usuarios);
void exportar_dados_livros(string nome, livro_t *lista_livros);
void exportar_dados_emprestimos(string nome, emprestimo_t *lista_emprestimo);

//menus
int menu();
int menu_cadastros();
int menu_localizar();
int menu_relatorios();
int menu_baixas();

int menu_localizar_livro();
int menu_localizar_usuario();

void mostrar_pendencias(emprestimo_t *lista, FILE *fp);
void retirar_enter(string str);
void formatar_maiuscula(string str);
void baixa_emprestimo(int id, emprestimo_t *lista, livro_t *livro);

int main()
{
    int menu_opcao, opc, opc_loc_livro, opc_loc_usuario;
    int qtd_livro = 0;
    int qtd_usuario = 0;
    int qtd_emprestimos = 0;
    int i, id_emp;


    livro_t *lista_livro = NULL;
    usuario_t *lista_usuario = NULL;
    emprestimo_t *lista_emprestimo = NULL;

    livro_t *aux_livro = NULL;
    usuario_t *aux_usuario = NULL;
    emprestimo_t *aux_emprestimo = NULL;

    printf("Lendo banco de dados...\n");
    ler_livros_arquivos_binario("livros.bin", &lista_livro, &qtd_livro);
    ler_usuarios_arquivo_binario("usuarios.bin", &lista_usuario, &qtd_usuario);
    ler_emprestimos_arquivo_binario("emprestimos.bin", &lista_emprestimo, &qtd_emprestimos);




    do{
        menu_opcao = menu();

        switch (menu_opcao) 
        {
        case 1://cadastros  
            opc = menu_cadastros();
            switch (opc)
            {
                case 0: //voltando ao menu
                    printf("Voltando ao menu...\n");

                case 1://livro
                    inserir_livro_inicio(&lista_livro, cadastrar_novo_livro(&qtd_livro));
                    break;
                    
                case 2://usuario
                    inserir_usuario_inicio(&lista_usuario, cadastrar_novo_usuario(&qtd_usuario));
                    break;

                case 3://emprestimo
                    aux_emprestimo = cadastrar_novo_emprestimo(lista_usuario, lista_livro, &qtd_emprestimos);
                    if(aux_emprestimo != NULL)
                    {
                        inserir_emprestimo_inicio(&lista_emprestimo, aux_emprestimo);
                    }
                    break;

                default:
                    printf("Opcao invalida. Voltando ao menu...\n\n");
                    break;
            }
            break;
        case 2://localizar
            opc = menu_localizar();
            switch (opc)
            {
            case 1://localizar livro
                do{
                    opc_loc_livro = menu_localizar_livro();
                    switch (opc_loc_livro)
                    {
                        case 1://titulo
                            aux_livro = localizar_livro_por_titulo(lista_livro);
                            if(aux_livro != NULL)
                                mostrar_dados_livro(aux_livro, stdout);
                            break;

                        case 2: //id
                            aux_livro = localizar_livro_por_id(lista_livro);
                            if(aux_livro != NULL)
                                mostrar_dados_livro(aux_livro, stdout);
                            break;

                        case 3: //palavra chave
                            aux_livro = localizar_livro_por_palavra_chave(lista_livro);
                            if(aux_livro != NULL)
                                mostrar_dados_livro(aux_livro, stdout);
                            break;

                        case 4://autor
                            aux_livro = localizar_livro_por_autor(lista_livro);
                            if(aux_livro != NULL)
                                mostrar_dados_livro(aux_livro, stdout);
                            break;
                        
                        default:
                            printf("Opcao invalida. Tente novamente\n");
                            break;
                    }

                }while(opc_loc_livro != 0);
                break;
            
            case 2: //localizar usuario
                do{
                    opc_loc_usuario = menu_localizar_usuario();
                    switch (opc_loc_usuario)
                    {
                        case 1://localizar por nome
                            aux_usuario = localizar_usuario_por_nome(lista_usuario);
                            if(aux_usuario != NULL)
                                mostrar_dados_usuario(aux_usuario, stdout);
                            break;

                        case 2://localizar por email
                            aux_usuario = localizar_usuario_por_email(lista_usuario);
                            if(aux_usuario != NULL)
                                mostrar_dados_usuario(aux_usuario, stdout);
                            break;

                        case 3://localizar por cracha
                            aux_usuario = localizar_usuario_por_cracha(lista_usuario);
                            if(aux_usuario != NULL)
                                mostrar_dados_usuario(aux_usuario, stdout);
                            break;
                        
                        default:
                            printf("Opcao invalida. Tente novamente\n");
                            break;
                    }

                }while(opc_loc_usuario != 0);
                break;

            default:
                break;
            }

        case 3: //relatorios
                opc = menu_relatorios();
                switch (opc)
                {
                case 1: mostrar_livros(lista_livro, stdout);
                        printf("Gostaria de exportar para .txt?\n");
                        printf("[1] - Sim\n");
                        printf("[2] - Nao\n");
                        scanf("%i", &i);
                        getchar();
                        
                        if(i == 1){
                            exportar_dados_livros("Livros.txt", lista_livro);
                        }

                    break;

                case 2: mostrar_usuarios(lista_usuario, stdout);
                        printf("Gostaria de exportar para .txt?\n");
                        printf("[1] - Sim\n");
                        printf("[2] - Nao\n");
                        scanf("%i", &i);
                        getchar();

                        if(i == 1){
                            exportar_dados_usuario("Usuarios.txt", lista_usuario);
                        }

                    break;

                case 3: mostrar_emprestimo(lista_emprestimo, stdout);
                        printf("Gostaria de exportar para .txt?\n");
                        printf("[1] - Sim\n");
                        printf("[2] - Nao\n");
                        scanf("%i", &i);
                        getchar();

                        if(i == 1){
                            exportar_dados_emprestimos("Emprestimos.txt", lista_emprestimo);
                        }
                    break;
                case 4://pendencias

                     mostrar_pendencias(lista_emprestimo, stdout);

                     break;

                case 0:
                    break;
                default:
                    break;
                }
                
            break;

        case 4://baixas
                opc = menu_baixas();
                if(opc == 1)
                {
                    //baixa de livros
                }
                    else if(opc == 2)
                    {
                        printf("Baixa de usuarios...\n");
                        //baixa de usuarios
                    }
                    else if (opc == 3)
                    {
                        printf("Digie o id do emprestimo: ");
                        scanf("%i", &id_emp);
                        getchar();
                        baixa_emprestimo(id_emp, lista_emprestimo, lista_livro);
                    }        

        case 0://salvar arquivos
            printf("Ate logo...");
            salvar_livros_arquivos_binario("livros.bin", lista_livro);
            salvar_usuarios_arquivo_binario("usuarios.bin", lista_usuario);
            salvar_emprestimos_arquivo_binario("emprestimos.bin", lista_emprestimo);
            break;

        default:
            printf("Opcao invalida. Tente novamente!\n");
            break;
        }
    
    }while(menu_opcao != 0);

    return 0;
}


int menu()
{
    int opc;

    printf("[1] - CADASTROS...\n");
    printf("[2] - LOCALIZAAR...\n");
    printf("[3] - RELATORIOS...\n");
    printf("[4] - BAIXAS...\n");
    printf("[0] - SAIR DO PROGRAMA\n");
    scanf("%i", &opc);

    return opc;
}

int menu_baixas()
{
    int opc;

    printf("[1] - BAIXA DE LIVROS\n");
    printf("[2] - BAIXA DE USUARIOS\n");
    printf("[3] - BAIXA DE EMPRESTIMO\n");
    printf("[0] - VOLTAR\n");
    scanf("%i", &opc);
    getchar();

    return opc;
}

int menu_cadastros()
{
    int opc;

    printf("[1] - CADASTRAR LIVRO\n");
    printf("[2] - CADASTRAR USUARIO\n");
    printf("[3] - CADASTRAR EMPRESTIMO\n");
    printf("[0] - VOLTAR AO MENU\n");
    scanf("%i", &opc);
    getchar();

    return opc;
}

int menu_relatorios()
{
    int opc;

    printf("[1] - RELATORIO DE LIVROS\n");
    printf("[2] - RELATORIO DE USUARIOS\n");
    printf("[3] - RELATORIO DE EMPRESTIMO\n");
    printf("[4] - RELATORIO DE PENDENCIAS\n");
    printf("[0] - VOLTAR AO MENU\n");
    scanf("%i", &opc);
    getchar();

    return opc;
}


int menu_localizar()
{
    int opc;

    printf("[1] - LOCALIZAR LIVRO\n");
    printf("[2] - LOCALIZAR USUARIO\n");
    printf("[3] - LOCALIZAR EMPRESTIMO\n");
    printf("[0] - VOLTAR AO MENU\n");
    scanf("%i", &opc);
    getchar();
    
    return opc;
}
int menu_localizar_livro()
{
    int opc;

    printf("Localizar livro por: \n");
    printf("[0] - Voltar ao menu\n");
    printf("[1] - Titulo\n");
    printf("[2] - Id\n");
    printf("[3] - Palavra chave\n");
    printf("[4] - Autor\n");
    scanf("%i", &opc);
    getchar();

    return opc;
}

int menu_localizar_usuario()
{
    int opc;
    printf("\n");
    printf("Localizar por usuario por: \n");
    printf("[0] - Voltar ao menu\n");
    printf("[1] - Nome\n");
    printf("[2] - Email\n");
    printf("[3] - Cracha\n");
    scanf("%i", &opc);
    getchar();

    return opc;
}

//localizar livros:

livro_t *localizar_livro_por_titulo(livro_t *lista_livro)
{
    string titulo;

    printf("Digite o titulo: ");
    fgets(titulo, TAM_STRING, stdin);
    retirar_enter(titulo);
    formatar_maiuscula(titulo);

    while (lista_livro)
    {
        if(strcmp(lista_livro->titulo, titulo) == 0)
        {
            //livro localizado
            return lista_livro;
        }
        lista_livro = lista_livro->p_prox;
    }

    //livro nao localizado
    printf("Livro nao localizado\n\n");
    return NULL;
    
}

livro_t *localizar_livro_por_id(livro_t *lista_livro)
{
    int id;

    printf("Digite o id: ");
    scanf("%i", &id);

    while (lista_livro)
    {
        if(lista_livro->id == id)
            return lista_livro;

        lista_livro = lista_livro->p_prox;
    }

    printf("Livro nao localizado\n\n");
    return NULL;
    
}

livro_t *localizar_livro_por_palavra_chave(livro_t *lista_livro)
{
    string palavra;

    printf("Digite a palavra: ");
    fgets(palavra, TAM_STRING, stdin);
    retirar_enter(palavra);
    formatar_maiuscula(palavra);

    while (lista_livro)
    {
        if(strcmp(lista_livro->palavra_1, palavra) == 0)
            return lista_livro;

        if(strcmp(lista_livro->palavra_2, palavra) == 0)
            return lista_livro;

        if(strcmp(lista_livro->palavra_3, palavra) == 0)
            return lista_livro;

        lista_livro = lista_livro->p_prox;
    }
    printf("Livro nao localizado\n\n");
    return NULL;
    
}

livro_t *localizar_livro_por_autor(livro_t *lista_livro)
{
    string autor;

    printf("Digite o nome do autor: ");
    fgets(autor, TAM_STRING, stdin);
    retirar_enter(autor);
    formatar_maiuscula(autor);

    while (lista_livro)
    {
        if(strcmp(lista_livro->autor_1, autor) == 0)
            return lista_livro;

        if(strcmp(lista_livro->autor_2, autor) == 0)
            return lista_livro;

        if(strcmp(lista_livro->autor_3, autor) == 0)
            return lista_livro;

        lista_livro = lista_livro->p_prox;
    }
    
    printf("Livro nao localizado\n\n");
    return NULL;
    
}

//localizar usuarios
usuario_t *localizar_usuario_por_nome(usuario_t *lista_usuario)
{
    string nome;

    printf("Digite o nome: ");
    fgets(nome, TAM_STRING, stdin);
    retirar_enter(nome);
    formatar_maiuscula(nome);

    while(lista_usuario)
    {
        if(strcmp(lista_usuario->nome, nome) == 0)
            return lista_usuario;

        lista_usuario = lista_usuario->p_prox;
    }

    printf("Usuario nao localizado\n");
    return NULL;

}

usuario_t *localizar_usuario_por_email(usuario_t *lista_usuario)
{
    string email;

    printf("Digite o email: ");
    fgets(email, TAM_STRING, stdin);
    retirar_enter(email);
    formatar_maiuscula(email);

    while (lista_usuario)
    {
        if(strcmp(lista_usuario->email, email) == 0)
            return lista_usuario;

        lista_usuario = lista_usuario->p_prox;
    }

    printf("Usuario nao localizado\n");
    return NULL;
}

usuario_t *localizar_usuario_por_cracha(usuario_t *lista_usuario)
{
    int cracha;

    printf("Digite o cracha: ");
    scanf("%i", &cracha);

    while (lista_usuario)
    {
        if(lista_usuario->cracha == cracha)
            return lista_usuario;

        lista_usuario = lista_usuario->p_prox;
    }
    
    printf("Usuario nao localizado\n");
    return NULL;
}


livro_t *cadastrar_novo_livro(int *qtd_livros)
{
    livro_t *novo = (livro_t*)malloc(sizeof(livro_t));

    int opc;

    novo->qtd_autores = 0;
    novo->qtd_palavras = 0;

    printf("Digite o titulo do livro...: ");
    fgets(novo->titulo, TAM_STRING, stdin);
    retirar_enter(novo->titulo);
    formatar_maiuscula(novo->titulo);

    printf("Digite o nome do primeiro autor(a): ");
    fgets(novo->autor_1, TAM_STRING, stdin);
    retirar_enter(novo->autor_1);
    formatar_maiuscula(novo->autor_1);
    novo->qtd_autores += 1;

    printf("Possui mais um autor?\n");
    printf("1 - Sim\n");
    printf("2 - Nao\n");
    printf(":: ");
    scanf("%i", &opc);
    getchar();

    if(opc == 1)
    {
        printf("Digite o nome do segundo autor(a): ");
        fgets(novo->autor_2, TAM_STRING, stdin);
        retirar_enter(novo->autor_2);
        formatar_maiuscula(novo->autor_2);
        novo->qtd_autores += 1;

        printf("Possui mais um autor?\n");
        printf("1 - Sim\n");
        printf("2 - Nao\n");
        printf(":: ");
        scanf("%i", &opc);
        getchar();

        if(opc == 1)
        {
            printf("Digite o nome do terceiro autor(a): ");
            fgets(novo->autor_3, TAM_STRING, stdin);
            retirar_enter(novo->autor_3);
            formatar_maiuscula(novo->autor_3);
            novo->qtd_autores += 1;
        }
    }

    //cadastrar palavras chaves
    printf("Digite uma palavra chave: ");
    fgets(novo->palavra_1, TAM_STRING, stdin);
    retirar_enter(novo->palavra_1);
    formatar_maiuscula(novo->palavra_1);
    novo->qtd_palavras += 1;

    printf("Quer cadastrar mais uma palavra? \n");
    printf("1 - Sim\n");
    printf("2 - Nao\n");
    printf(":: ");
    scanf("%i", &opc);
    getchar();
    
    if(opc == 1)
    {
        printf("Digite mais uma palavra: ");
        fgets(novo->palavra_2, TAM_STRING, stdin);
        retirar_enter(novo->palavra_2);
        formatar_maiuscula(novo->palavra_2);
        novo->qtd_palavras += 1;

        printf("Quer cadastrar mais uma palavra? \n");
        printf("1 - Sim\n");
        printf("2 - Nao\n");
        printf(":: ");
        scanf("%i", &opc);
        getchar();

        if(opc == 1)
        {
            printf("Digite mais uma palavra: ");
            fgets(novo->palavra_3, TAM_STRING, stdin);
            retirar_enter(novo->palavra_3);
            formatar_maiuscula(novo->palavra_3);
            novo->qtd_palavras += 1;
        }
    }

    printf("\nDigite o nome da editora...: ");
    fgets(novo->editora, TAM_STRING, stdin);
    retirar_enter(novo->editora);
    formatar_maiuscula(novo->editora);

    printf("Digite o local da publicacao...: ");
    fgets(novo->local_publicacao, TAM_STRING, stdin);
    retirar_enter(novo->local_publicacao);
    formatar_maiuscula(novo->local_publicacao);

    printf("Digite o ano da publicacao...: ");
    scanf("%i", &novo->ano_publicacao);

    printf("Digite a quantidade de paginas...: ");
    scanf("%i", &novo->qtd_paginas); 

    printf("Digite a edicao...: ");
    scanf("%i", &novo->edicao);
    
    printf("Digite a quantidade de exemplares...: ");
    scanf("%i", &novo->qtd_exemplares);
    fflush(stdin);

    novo->p_prox = NULL;
    novo->id = *(qtd_livros) + 1;

    if(novo != NULL)
        *qtd_livros += 1;

    return novo;    
    
}

void inserir_livro_inicio(livro_t **lista, livro_t *novo)
{
    if(*lista == NULL)
    {
        *lista = novo;
    }else{
        novo->p_prox = *lista;
        *lista = novo;
    }
}

void mostrar_livros(livro_t *lista, FILE *fp)
{
    while (lista != NULL)
    {
        mostrar_dados_livro(lista, fp);
        printf("\n\n");
        lista = lista->p_prox;
    }
    
}

void mostrar_dados_livro(livro_t *dado, FILE *fp)
{
    fprintf(fp, "Id......................: %i\n", dado->id);
    fprintf(fp, "Titulo..................: %s\n", dado->titulo);
    fprintf(fp, "Autor 1.................: %s\n", dado->autor_1);
    if(dado->qtd_autores > 1)
    {
        printf("Autor 2.........: %s\n", dado->autor_2);
    }
    if(dado->qtd_autores > 2)
    {
        printf("Autor 3.........: %s\n", dado->autor_3);
    }

    fprintf(fp, "Palavra chave...........: %s\n", dado->palavra_1);
    if(dado->qtd_palavras > 1)
    {
        printf("Palavra chave 2.........: %s\n", dado->palavra_2);
    }
    if(dado->qtd_palavras > 2)
    {
        printf("Palavra chave 3.........: %s\n", dado->palavra_3);
    }

    fprintf(fp, "Editora.................: %s\n", dado->editora);
    fprintf(fp, "Local da publicacao.....: %s\n", dado->local_publicacao);
    fprintf(fp, "Ano.....................: %i\n", dado->ano_publicacao);
    fprintf(fp, "Quantidade de paginas...: %i\n", dado->qtd_paginas);
    fprintf(fp, "Edicao..................: %i\n", dado->edicao);
    fprintf(fp, "Quantidade de exemplares: %i\n\n", dado->qtd_exemplares);

}

usuario_t *cadastrar_novo_usuario(int *qtd_usuario)
{
    usuario_t *novo = NULL;

    novo = (usuario_t*)malloc(sizeof(usuario_t));

    fflush(stdin);

    printf("digite o nome...: ");
    fgets(novo->nome, TAM_STRING, stdin);
    retirar_enter(novo->nome);
    formatar_maiuscula(novo->nome);

    printf("Digite o email......: ");
    fgets(novo->email, TAM_STRING, stdin);
    retirar_enter(novo->email);
    formatar_maiuscula(novo->email);

    printf("Digite o endereco...: ");
    fgets(novo->endereco, TAM_STRING, stdin);
    retirar_enter(novo->endereco);
    formatar_maiuscula(novo->endereco);

    printf("Digite o telefone...: ");
    fgets(novo->telefone, TAM_STRING, stdin);
    retirar_enter(novo->telefone);

    novo->cracha = *(qtd_usuario) + 1;
    printf("\nNumero do cracha: %i", novo->cracha);

    novo->usuario_ativo = true;
    printf("\nUsuario ativo\n");

    novo->qtd_livros_emprestados = 0;

    novo->pendencia = 0;

    novo->p_prox = NULL;

    if(novo != NULL)
        *qtd_usuario += 1;

    return novo;

}

void inserir_usuario_inicio(usuario_t **lista, usuario_t *novo)
{
    if(*lista == NULL)
    {
        *lista = novo;
    }else{
        novo->p_prox = *lista;
        *lista = novo;
    }
}

void mostrar_usuarios(usuario_t *lista, FILE *fp)
{   
    while (lista != NULL)
    {
        mostrar_dados_usuario(lista, fp);
        lista = lista->p_prox;
    }
}

void mostrar_dados_usuario(usuario_t *dado,  FILE *fp)
{
    fprintf(fp, "Nome.................: %s\n", dado->nome);
    fprintf(fp, "email................: %s\n", dado->email);
    fprintf(fp, "Endereco.............: %s\n", dado->endereco);
    fprintf(fp, "Numero de telefone...: %s\n", dado->telefone);
    fprintf(fp, "Numero do cracha.....: %i\n", dado->cracha);
    fprintf(fp, "Pendencias...........: %i\n", dado->pendencia);

    if(dado->usuario_ativo == true)
    {
        fprintf(fp, "USUARIO ATIVO\n\n\n");
    }
    else{
        fprintf(fp, "USUARIO INATIVO\n\n\n");
    }
}

emprestimo_t *cadastrar_novo_emprestimo(usuario_t *lista_usuario, livro_t *lista_livro, int *qtd_emprestimo)
{
    usuario_t *usuario = NULL;
    livro_t *livro = NULL;

    emprestimo_t *novo = (emprestimo_t*)malloc(sizeof(emprestimo_t));

    int opc, qtd_dias;

    printf("LOCALIZAR O USUARIO POR NOME...\n");
    usuario = localizar_usuario_por_nome(lista_usuario);
    mostrar_dados_usuario(usuario, stdout);
    if(usuario->usuario_ativo == false)
    {
        printf("Usuario inativo\n");
        return NULL;
    }
    printf("Confirmar usuario?\n");
    printf("[1] - Sim\n");
    printf("[2] - Nao\n");
    scanf("%i", &opc);
    if(opc == 2)
        return NULL;

    fflush(stdin);
    printf("LOCALIZAR LIVRO POR TITULO...\n");
    livro = localizar_livro_por_titulo(lista_livro);
    mostrar_dados_livro(livro, stdout);
    if(livro->qtd_exemplares == 0)
    {
        printf("Livro sem exemplares disponiveis\n");
        return NULL;
    }
    printf("Confirmar livro?\n");
    printf("[1] - Sim\n");
    printf("[2] - Nao\n");
    scanf("%i", &opc);
    if(opc == 2)
        return NULL;

    printf("Digite a quantidade de dias: ");
    scanf("%i", &qtd_dias);
    novo->id_emprestimo = *(qtd_emprestimo) + 1;
    printf("ID do emprestimo: %i\n", novo->id_emprestimo);
    novo->cracha_usuario = usuario->cracha;
    novo->dias_atraso = 0;
    novo->id_livro = livro->id;
    strcpy(novo->titulo, livro->titulo);
    strcpy(novo->nome, usuario->nome);
    novo->qtd_dias = qtd_dias;
    novo->emp_ativo = true;
    livro->qtd_exemplares -= 1;
    novo->p_prox = NULL;

    if (novo != NULL)
        *qtd_emprestimo += 1;

    return novo;
}

void inserir_emprestimo_inicio(emprestimo_t **lista, emprestimo_t *novo)
{
    {
    if(*lista == NULL)
    {
        *lista = novo;
    }else{
        novo->p_prox = *lista;
        *lista = novo;
    }
}
}

void mostrar_emprestimo(emprestimo_t *lista, FILE *fp)
{
    while (lista != NULL)
    {
        mostrar_dados_emprestimo(lista, fp);
        printf("\n");
        lista = lista->p_prox;
    }
}

void mostrar_dados_emprestimo(emprestimo_t *dado, FILE *fp)
{
    fprintf(fp, "Titulo....................: %s\n", dado->titulo);
    fprintf(fp, "ID livro..................: %i\n", dado->id_livro);
    fprintf(fp, "Usuario...................: %s\n", dado->nome);
    fprintf(fp, "Cracha Usuario............: %i\n", dado->cracha_usuario);
    fprintf(fp, "Dias emprestados..........: %i\n", dado->qtd_dias);
    fprintf(fp, "Dias em atraso............: %i\n", dado->dias_atraso);
    fprintf(fp, "ID do emprestimo..........: %i\n", dado->id_emprestimo);

    if(dado->emp_ativo == true)
    {
        fprintf(fp, "EMPRESTIMO ATIVO\n\n\n");
    }
    else
    {
        fprintf(fp, "EMPRESTIMO INATIVO\n\n\n");
    }
}

void mostrar_pendencias(emprestimo_t *lista, FILE *fp)
{
    while (lista != NULL)
    {
        if(lista->emp_ativo == true)
        {
            mostrar_dados_emprestimo(lista, fp);
            printf("\n");
        }
        lista = lista->p_prox;
    }
}

void retirar_enter(string str)
{
    int tam;

    tam = strlen(str);
    str[tam - 1] = '\0';
}

void formatar_maiuscula(string str)
{
    int up, tam;

    tam = strlen(str);
    for(up = 0; up < tam; up++)
    {
        str[up] = toupper(str[up]);
    }
}

void baixa_emprestimo(int id, emprestimo_t *lista, livro_t *livro)
{
    int qtd_dias, opc;

    while (lista)
    {
        if(lista->id_emprestimo == id)
        {
            mostrar_dados_emprestimo(lista, stdout);
            printf("Confirmar baixa neste emprestimo? \n");
            printf("[1] - Sim\n");
            printf("[2] - Nao\n");
            scanf("%i", &opc);
            
            if(opc == 2)
                break;
                
            printf("Quantos dias o usuario ficou com o livro: ");
            scanf("%i", &qtd_dias);
            if(lista->qtd_dias < qtd_dias)
            {
                lista->dias_atraso = qtd_dias - lista->qtd_dias;
                printf("Livro entregue com %i dias de atraso\n", lista->dias_atraso);
            }

            lista->emp_ativo = false;
            
            while(livro)
            {
                if(lista->id_livro == livro->id)
                    livro->qtd_exemplares += 1;
                livro = livro->p_prox;
            }
        }
        lista = lista->p_prox;
    }

    
}
//TRATAMENTO DE DADOS BINARIO

void salvar_livros_arquivos_binario(string nome, livro_t *lista_livros)
{

    FILE *fp = fopen(nome, "wb");

    if (fp == NULL) {
        printf("Nao foi possivel abrir o arquivo %s\n", nome);
        return;
    }

    while (lista_livros) {
       fwrite(lista_livros, sizeof(livro_t), 1, fp);
       lista_livros = lista_livros->p_prox;
    }

    fclose(fp);

}
void ler_livros_arquivos_binario(string nome, livro_t **lista_livros, int *qtd_livro)
{
    FILE *fp = fopen(nome, "rb");
    livro_t *aux = NULL;

    if (fp == NULL) {
        printf("Nao foi possivel abrir o arquivo %s\n", nome);
        return;
    }

    while (!feof(fp)) {
        aux = (livro_t*)malloc(sizeof(livro_t));
        fread(aux, sizeof(livro_t), 1, fp);
        aux->p_prox = NULL;
        if (!feof(fp)) {
            inserir_livro_inicio(lista_livros, aux);
            *qtd_livro += 1;
        }
        else {
            free(aux);
        }
    }

    fclose(fp);
}

void salvar_usuarios_arquivo_binario(string nome, usuario_t *lista_usuario)
{
    FILE *fp = fopen(nome, "wb");

    if (fp == NULL) {
        printf("Nao foi possivel abrir o arquivo %s\n", nome);
        return;
    }

    while (lista_usuario) {
       fwrite(lista_usuario, sizeof(usuario_t), 1, fp);
       lista_usuario = lista_usuario->p_prox;
    }

    fclose(fp);

}
void ler_usuarios_arquivo_binario(string nome, usuario_t **lista_usuario, int *qtd_usuario)
{
    FILE *fp = fopen(nome, "rb");
    usuario_t *aux = NULL;

    if (fp == NULL) {
        printf("Nao foi possivel abrir o arquivo %s\n", nome);
        return;
    }

    while (!feof(fp)) {
        aux = (usuario_t*)malloc(sizeof(usuario_t));
        fread(aux, sizeof(usuario_t), 1, fp);
        aux->p_prox = NULL;
        if (!feof(fp)) {
            inserir_usuario_inicio(lista_usuario, aux);
            *qtd_usuario += 1;
        }
        else {
            free(aux);
        }
    }

    fclose(fp);
}

void salvar_emprestimos_arquivo_binario(string nome, emprestimo_t *lista_emprestimo)
{
    FILE *fp = fopen(nome, "wb");

    if (fp == NULL) {
        printf("Nao foi possivel abrir o arquivo %s\n", nome);
        return;
    }

    while (lista_emprestimo) {
       fwrite(lista_emprestimo, sizeof(emprestimo_t), 1, fp);
       lista_emprestimo = lista_emprestimo->p_prox;
    }

    fclose(fp);
}
void ler_emprestimos_arquivo_binario(string nome, emprestimo_t **lista_emprestimo, int *qtd_emprestimo)
{
    FILE *fp = fopen(nome, "rb");
    emprestimo_t *aux = NULL;

    if (fp == NULL) {
        printf("Nao foi possivel abrir o arquivo %s\n", nome);
        return;
    }

    while (!feof(fp)) {
        aux = (emprestimo_t*)malloc(sizeof(emprestimo_t));
        fread(aux, sizeof(emprestimo_t), 1, fp);
        aux->p_prox = NULL;
        if (!feof(fp)) {
            inserir_emprestimo_inicio(lista_emprestimo, aux);
            *qtd_emprestimo += 1;
        }
        else {
            free(aux);
        }
    }

    fclose(fp);
}

// EXPORTAR ARQUIVOS .TXT

void exportar_dados_usuario(string nome, usuario_t *lista_usuarios)
{
    FILE *fp = NULL;

    fp = fopen(nome, "w");

    while (lista_usuarios != NULL)
    {
        mostrar_dados_usuario(lista_usuarios, fp);
        lista_usuarios = lista_usuarios->p_prox;
    }

    fclose(fp);
}

void exportar_dados_livros(string nome, livro_t *lista_livros)
{
    FILE *fp = NULL;

    fp = fopen(nome, "w");

    while (lista_livros != NULL)
    {
        mostrar_dados_livro(lista_livros, fp);
        lista_livros = lista_livros->p_prox;
    }

    fclose(fp);
}

void exportar_dados_emprestimos(string nome, emprestimo_t *lista_emprestimo)
{
    FILE *fp = NULL;

    fp = fopen(nome, "w");

    while (lista_emprestimo != NULL)
    {
        mostrar_dados_emprestimo(lista_emprestimo, fp);
        lista_emprestimo = lista_emprestimo->p_prox;
    }

    fclose(fp);
}
